openapi: 3.0.3
info:
  title: Task Management API
  description: A professional REST API for task management with authentication
  version: 1.0.0
  contact:
    name: KIIT Student
    email: student@kiit.ac.in
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Local development server
  - url: https://your-api-domain.com
    description: Production server

paths:
  /health:
    get:
      summary: Health check
      tags: [Health]
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  timestamp:
                    type: string

  /api/auth/register:
    post:
      summary: Register new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password, email]
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input
        '409':
          description: Username exists

  /api/auth/login:
    post:
      summary: User login
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid credentials

  /api/auth/profile:
    get:
      summary: Get user profile
      description: Get current user profile (requires authentication)
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Profile not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/verify:
    post:
      summary: Verify JWT token
      description: Verify if a JWT token is valid
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Token is valid
                  data:
                    type: object
                    properties:
                      userId:
                        type: integer
                      username:
                        type: string
                      iat:
                        type: integer
                      exp:
                        type: integer
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/demo-credentials:
    get:
      summary: Get demo credentials
      description: Get demo user credentials for testing
      tags:
        - Authentication
      responses:
        '200':
          description: Demo credentials returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Demo credentials for testing
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          properties:
                            username:
                              type: string
                            password:
                              type: string
                            email:
                              type: string
                            role:
                              type: string

  /api/tasks:
    get:
      summary: Get all tasks
      tags: [Tasks]
      responses:
        '200':
          description: Tasks retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
    post:
      summary: Create task
      tags: [Tasks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title]
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [pending, in-progress, completed]
      responses:
        '201':
          description: Task created
        '400':
          description: Invalid input

  /api/tasks/{id}:
    get:
      summary: Get task by ID
      description: Retrieve a specific task by its ID
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update task
      description: Update an existing task
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  example: Updated task title
                description:
                  type: string
                  example: Updated task description
                status:
                  type: string
                  enum: [pending, in-progress, completed]
                  example: in-progress
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Task updated successfully
                  data:
                    $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete task
      description: Delete a task by its ID
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Task deleted successfully
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/tasks/status/{status}:
    get:
      summary: Get tasks by status
      description: Filter tasks by their status
      tags:
        - Tasks
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum: [pending, in-progress, completed]
          example: pending
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: integer
                    example: 3
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '400':
          description: Invalid status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, in-progress, completed]
        created_at:
          type: string
        updated_at:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john@example.com
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    UserProfile:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Profile retrieved successfully
        data:
          $ref: '#/components/schemas/User'

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Login successful
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Error message
        error:
          type: string
          example: ERROR_CODE

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Tasks
    description: Task management operations 